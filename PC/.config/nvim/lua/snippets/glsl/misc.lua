local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node

return {

    s({trig = "setup", dscr = "Basic setup"},
        t({"#version 460",
            "#ifdef GL",
            "precision mediump float;",
            "#endif",
            "",
            "out vec4 fragColor;",
            "",
            "uniform float u_time;",
            "uniform vec2 u_resolution;",
            "uniform vec2 u_mouse;",
            "",
            "const float FLOAT_ERROR = 1e-4;",
            "const float PI = 3.14159265359;",
            "",
            "const struct TIME_stageConfig{",
            "    float stageLength;",
            "    int stages;",
            "    int subdivisions;",
            "    float loopLength;",
            "    float stageSubdiv;",
            "};",
            "",
            "struct TIME_stageInfo{",
            "    float loopTime;",
            "    int currentStage;",
            "    float stageProgress;",
            "    float stageTime;",
            "};",
            "",
            "TIME_stageConfig TIME_SetStageConfig(float stageLength, int stages, int subdivisions){",
            "    return TIME_stageConfig(stageLength, stages, subdivisions, stageLength*float(stages), stageLength/float(subdivisions));",
            "}",
            "",
            "TIME_stageInfo TIME_GetStageInfo(float time, TIME_stageConfig config){",
            "    float loopTime = mod(time, config.loopLength);",
            "    int currentStage = int(loopTime/config.stageLength);",
            "    float stageProgress = fract(loopTime/config.stageLength);",
            "    float stageTime = mod(loopTime, config.stageLength);",
            "    return TIME_stageInfo(loopTime, currentStage, stageProgress, stageTime);",
            "}",
            "",
            "",
            "void main(){",
            "    vec2 uv = (2.0 * gl_FragCoord.xy - u_resolution) / u_resolution.y;",
            "    vec3 color = vec3(0.0);",
            "",
            "    fragColor = vec4(color, 1.0);",
            "}"
        })),
}

